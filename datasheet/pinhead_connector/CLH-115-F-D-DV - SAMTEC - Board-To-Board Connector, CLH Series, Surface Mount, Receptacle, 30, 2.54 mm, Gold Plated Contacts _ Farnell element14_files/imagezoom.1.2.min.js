/*
 * ImageZoom v 1.2
 * */
function ImageZoom(params) {
    "use strict";
    // Global dimension vars
    var viewGeometry, zoomGeometry, thresholds, activeArea;

    // Global events and event array containers
    var mousemoveHandle, touchMoveHandle, zoomInHandle, zoomOutHandle, thumbsEv = [], listeners = [];

    // Global Containers
    var libImages, mainImgDims, i18nLang, PDPTrack, PDPsku;

    /*
     In absence of params being supplied, presume the call is
     for a product detail page for ease of implementation
     [This is the main use case]
     */
    params = params || {};
    var prodImgDOM = params.mainDom || new dojo.NodeList(dojo.byId("productImages")) || {};
    var mainImg = params.mainImg || prodImgDOM.query("img#productMainImage")[0] || "";
    var mainImgClone = mainImg.cloneNode(false) || "";
    var thumbnails = params.additionalImg || prodImgDOM.query("div div a img") || ""; // #scrollingAltImgWidget ?
    var baseImgPath = params.basePath || "http://uk.farnell.com/productimages/large/en_GB/"; // Relative
    var magnification = params.magnification || 200; // Default magnification 150%
    var zoomMultiplier = magnification / 100;
    var thumbSize = 40;
    var windowSize = 672;
    var thumbEnlargement = (thumbSize/windowSize);

    function killEvent(handle) {
        if (dojo.isArray(handle) && dojo.isArray(handle[0])) {
            dojo.forEach(handle, function (a) {
                if (a !== "undefined") {
                    dojo.disconnect(a);
                }
            });
        } else {
            dojo.disconnect(handle);
        }
    }

    function updateStyle(el,styles) {
        // IE workaround for dojo.attr("style" "...")
        if(typeof el.style.setAttribute !== "undefined") {
            el.style.setAttribute("cssText",styles);
        } else {
            dojo.attr(el,"style", styles);
        }
    }

    function closeOverlay(el) {
        var overlayClose, escClose, clickClose;

        function handleClose () {
            killEvent(overlayClose);
            killEvent(escClose);
            killEvent(clickClose);
            killEvent(mousemoveHandle);
            killEvent(touchMoveHandle);
            killEvent(zoomInHandle);
            killEvent(zoomOutHandle);
        }
        function killClose(e) {
            dojo.stopEvent(e);
            dojo.destroy(el);

        }

        function killOverlay(e) {
            var elClass, elId;
            elClass = e.target.getAttribute("class");
            elId = e.target.getAttribute("id");

            if ((elClass === "iz-column iz-container") || (elId === "iz-overlay")) {
                dojo.destroy(el);
                killEvent(listeners);

            }
        }

        function killEscape(e) {

            if (e.keyIdentifier === "U+001B" || e.keyCode === 27) {
                dojo.destroy(el);
                killEvent(listeners);
            } else {
                dojo.stopEvent(e);
            }
        }

        clickClose = dojo.connect(dojo.query("#iz-close a")[0], "onclick", killClose);
        overlayClose = dojo.connect(el, "onclick", killOverlay);
        escClose = dojo.connect(window, "onkeyup",killEscape);

    }

    function imgRatio(w, h) {

        var result;
        result = "landscape";

        // Is portrait or nearly square
        if ((w < h) || (w / h < 1.3 && w / h > 0.70)) {
            result = "portrait";
        } else if(w == h) {
            result = "square";
        }

        return result;
    }

    function minEntryCalc(view, active, offset, zoom) {
        var obj = {};
        obj.min = (view - active / zoom) / zoom + offset;
        obj.max = active / zoom + obj.min;
        return obj;
    }

    function activeCursorArea(vG, thresh) {

        /*
         * Active cursor area takes the view geometry (x,y,w,h)
         * and creates an active area for the cursor in the
         * browser window against the image thresholds and magnification.
         * */

        var obj = {};
        obj.x = minEntryCalc(vG.w, thresh.activeWidth, vG.x, zoomMultiplier);
        obj.y = minEntryCalc(vG.h, thresh.activeHeight, vG.y, zoomMultiplier);

        return obj;

    }

    function getLiveZoomGeom(el) {
        var geom = {};
        geom.w = parseInt(parseFloat(dojo.style(el,"width")), 10);
        geom.h = parseInt(parseFloat(dojo.style(el,"height")), 10);
        return geom;
    }

    function setOrientationClass(el, className) {
        if (className === "landscape") {
            dojo.removeClass(el, "portrait");
            dojo.addClass(el, className);
        } else {
            dojo.removeClass(el, "landscape");
            dojo.addClass(el, className);
        }
        return el;
    }

    function positionThresholds(view, zoom) {
        var offsets = {};
        offsets.activeWidth = zoom.w - view.w;
        offsets.activeHeight = zoom.h - view.h;
        offsets.x = (zoom.w > view.w) ? 0 : Math.abs((zoom.w - view.w) / 2);
        offsets.y = (zoom.h > view.h) ? 0 : Math.abs((zoom.h - view.h) / 2);

        return offsets;
    }

    function clickCursorPos(e, min, max) {
        // Set min of max offsets for image relative to cursor
        return (e < min) ? 0 : (e > max) ? false : -Math.abs(e - min);
    }

    function moveMechanics(x,y,img) {
        var cursorPosX, cursorPosY, offsets;

        cursorPosX = x;
        cursorPosY = y;
        offsets = {};

        /*
         * Ensure the cursor is within the active viewport
         * before allowing movement control.
         * */

        if ((cursorPosX > viewGeometry.x && cursorPosY > viewGeometry.y) && (cursorPosX < (viewGeometry.x + viewGeometry.w) && cursorPosY < (viewGeometry.y + viewGeometry.h))) {
            if (viewGeometry.w - zoomGeometry.w >= 0) {
                offsets.left = (viewGeometry.w - zoomGeometry.w) / 2;
            } else {
                offsets.left = (cursorPosX < activeArea.x.max) ? clickCursorPos(cursorPosX, activeArea.x.min, activeArea.x.max) * 2 : -Math.abs(thresholds.activeWidth);
            }

            if (viewGeometry.h - zoomGeometry.h >= 0) {
                offsets.top = (viewGeometry.h - zoomGeometry.h) / 2;
            } else {
                offsets.top = (cursorPosY < activeArea.y.max) ? clickCursorPos(cursorPosY, activeArea.y.min, activeArea.y.max) * 2 : -Math.abs(thresholds.activeHeight);
            }
            dojo.style(img, "left", offsets.left + "px");
            dojo.style(img, "top", offsets.top + "px");
        }
    }

    function cursorMoveFN(e){
        moveMechanics(e.clientX, e.clientY,this);
    }

    function mouseMoveFN(e){
        e.preventDefault();
        moveMechanics(e.changedTouches[0].pageX, e.changedTouches[0].pageY,this);
    }

    function pointerEvent(el) {
        touchMoveHandle = dojo.connect(el,'touchmove', mouseMoveFN);
        mousemoveHandle = dojo.connect(el, 'mousemove', cursorMoveFN);
    }

    function zoomOutFN(e) {
        var target, libIndex, lib;

        target = this.children[0];
        libIndex = dojo.attr(this.children[0],"data-libindex");
        lib = libImages[libIndex];

        updateStyle(target,"");

        if (lib.topOffset > 0 && lib.orientation !== "portrait") {
            dojo.style(target, {paddingTop: lib.topOffset + "px"});
        }

        dojo.removeClass(this, "iz-zoomout");
        dojo.addClass(this, "iz-zoomin");

        zoomInHandle = zoomIn(this);

        killEvent(zoomOutHandle);
        killEvent(touchMoveHandle);
        killEvent(mousemoveHandle);

    }

    function zoomOut(el) {
        return dojo.connect(el, "onclick", zoomOutFN);
    }

    function zoomInFN(e) {
        var target, libIndex, lib;

        target = this.children[0];
        libIndex = dojo.attr(this.children[0],"data-libindex");
        lib = libImages[libIndex];

        updateStyle(target,"");

        if (lib.orientation === "portrait") {
            dojo.style(target, {
                height: "200%",
                width: "auto",
                position: "absolute"
            });
        } else {
            dojo.style(target, {
                width: "200%",
                height: "auto",
                position: "absolute"
            });
        }

        dojo.removeClass(this, "iz-zoomin");
        dojo.addClass(this, "iz-zoomout");


        // Get Zoomed image Geometry
        zoomGeometry = getLiveZoomGeom(target);

        // Calc offsets that the image can not be moved beyond
        thresholds = positionThresholds(viewGeometry, zoomGeometry);

        activeArea = activeCursorArea(viewGeometry, thresholds);

        // Cursor click position
        var clickCursor = {};

        // Fix the X or Y if the image is smaller on W or H
        if (viewGeometry.w - zoomGeometry.w >= 0) {
            clickCursor.left = (viewGeometry.w - zoomGeometry.w) / 2;
        } else {
            clickCursor.left = (e.clientX < activeArea.x.max) ? clickCursorPos(e.clientX, activeArea.x.min, activeArea.x.max) * 2 : -Math.abs(thresholds.activeWidth);
        }

        // Fix the X or Y if the image is smaller on W or H
        if (viewGeometry.h - zoomGeometry.h >= 0) {
            clickCursor.top = (viewGeometry.h - zoomGeometry.h) / 2;
        } else {
            clickCursor.top = (e.clientY < activeArea.y.max) ? clickCursorPos(e.clientY, activeArea.y.min, activeArea.y.max) * 2 : -Math.abs(thresholds.activeHeight);
        }

        // Set event handlers
        mousemoveHandle = pointerEvent(target, thresholds, activeArea);
        zoomOutHandle = zoomOut(this);

        dojo.style(target, {
            top: clickCursor.top + "px",
            left: clickCursor.left + "px"
        });

        killEvent(zoomInHandle);

    }

    function zoomIn(el) {
        var target = el[0] || el;

        return dojo.connect(target, 'onclick', zoomInFN);
    }

    function insertImage(img, lib, target) {

        setOrientationClass(img, lib.orientation);
        // dojo.fadeIn({node: img, duration:200}).play();

        // Attach Zoom events (Zoomed Img Geometry)
        zoomInHandle = zoomIn(target);

        // Remove loader fade in image

        dojo.removeClass(target, "iz-zoomout", "iz-zoomin");
        dojo.addClass(target, "iz-zoomin");

    }

    function xhrZoomImg(lib, target) {
        var img, prevImg, imgWrapper;
        prevImg = dojo.byId("zoomImg");

        if(prevImg) {
            killEvent(mousemoveHandle);
            killEvent(touchMoveHandle);
            killEvent(zoomInHandle);
            killEvent(zoomOutHandle);
            dojo.destroy(dojo.byId("zoomImg"));
        }

        imgWrapper = dojo.query(".iz-main")[0];
        dojo.addClass(imgWrapper, "loading");


        img = new Image();


        dojo.attr(img,{id: "zoomImg"});
        dojo.attr(img, "data-libindex", lib.arrayIndex);


        img.onload = function() {
            var ratio;

            if(lib.topOffset === "") {
                if(lib.orientation === "landscape") {
                    ratio = 672 / this.width;
                    lib.topOffset = (480 - this.height*ratio)/2;
                } else {
                    lib.topOffset = 0;
                }

            }

            dojo.removeClass(imgWrapper, "loading");

            updateStyle(img, "margin-top: " + lib.topOffset + "px; ");//opacity:0;
            dojo.place(img, imgWrapper, "last");

            insertImage(img, lib, target);
        };

        img.src = lib.largePath;

        return img;

    }

    function changeImageFN(e) {

        var imgWrapper = dojo.query(".iz-main")[0];
        var libindex = dojo.attr(this.children[0],"data-libindex");

        // Set status of thumbnails
        var activeThumb = dojo.query(".iz-thumb-wrapper.active")[0];
        dojo.removeClass(activeThumb, "active");
        dojo.addClass(this, "active");

        xhrZoomImg(libImages[libindex], imgWrapper);

    }

    function selectImage(el, lib) {
        return dojo.connect(el, "onclick", changeImageFN);
    }

    function zoomPageLayout(libImages) {
        var izOverlay, izContainer, izClose, izLibrary, izMain;

        /*
         * Markup for zoom
         * */

        var izWrap = dojo.create("div", {
            id: 'iz-wrap'
        });

        izOverlay = dojo.create("div", {
            id: 'iz-overlay'
        });

        izContainer = dojo.create("div");
        dojo.attr(izContainer, "class", "iz-container");

        izClose = dojo.create("div", {
            id: "iz-close",
            innerHTML: '<a class="closeIconWrap" href="#"><span class="pfIcon pfClose"></span>' + i18nLang.close + '</a>'
        });
        dojo.attr(izClose, "class", "close closeOverlay closeOverlayWrap");

        izMain = dojo.create("div");
        dojo.attr(izMain, "class", "iz-column iz-main loading");

        izLibrary = dojo.create("div");
        dojo.attr(izLibrary, "class", "iz-column iz-library");

        var izLibWrapper = dojo.create("div");
        dojo.attr(izLibWrapper, "class", "iz-libwrapper");

        var prodDesc = dojo.clone(dojo.byId("productDescription"));
        dojo.place(prodDesc, izLibWrapper, "last");

        dojo.place(izLibWrapper, izLibrary, "last");

        // Add library thumbnails
        dojo.forEach(libImages, function (a, i) {
            var izThumb = dojo.create("img", {
                src: a.thumbPath
            });

            if(a.orientation === "landscape") {
                updateStyle(izThumb,"margin-top : " + a.thumbOffset);
            }

            dojo.attr(izThumb, "class", "iz-thumb iz-zoomin thumb-" + i);
            dojo.attr(izThumb, "data-libindex", i);

            var izThumbWrapper = dojo.create("div");
            dojo.attr(izThumbWrapper, "class", a.orientation + " iz-thumb-wrapper " + a.acviveClass );

            // Add to events array
            thumbsEv.push(selectImage(izThumbWrapper, a, i));

            dojo.place(izThumb, izThumbWrapper, "last");
            dojo.place(izThumbWrapper, izLibWrapper, "last");

        });

        /* Insert close button  */
        dojo.place(izClose, izContainer, 'last');

        /* Insert viewport to container */
        dojo.place(izMain, izContainer, 'last');

        /* Insert library to container */
        dojo.place(izLibrary, izContainer, 'last');

        /* Insert container to Overlay */
        dojo.place(izContainer, izWrap, 'last');
        dojo.place(izOverlay, izWrap, 'last');

        return izWrap;
    }

    function addZoom(target, libImages) {

        function startZoomFN() {
            PDPTrack(PDPsku, "Image Zoom");

            // Insert overlay markup into DOM
            dojo.place(
                zoomPageLayout(libImages),
                dojo.body(),
                'last'
            );

            // New NodeList with live DOM elements
            var wrapper = dojo.byId("iz-wrap");
            var izDOM = new dojo.NodeList(wrapper);

            // Get geometry of viewport (x,y,w,h)
            viewGeometry = dojo.position(izDOM.query(".iz-main")[0]);

            // Set close overlay actions
            closeOverlay(wrapper);

            // Activate first image
            dojo.query(".iz-thumb-wrapper.active")[0].click();

        }

        dojo.connect(target, "onclick", startZoomFN);
    }

    function estimatedTopOffset(h) {
        /*
         * This curently uses some fixed dimensions
         * for the view area to estimate the vert
         * offset for large (odd shaped) images.
         * */
        var factor = 672 / 40;
        var estimateHeight = h * factor;
        var offset = (480) - estimateHeight + 2;

        return (offset > 0 && offset < 480) ? offset / 2 : 0;
    }

    function largeImgPaths(imgPath) {
        var largeImg, imgPatt, filename;

        // get filename from path
        imgPatt = /[^\/]([a-zA-Z0-9\-]+\.jpg)$/g;
        filename = imgPath.match(imgPatt);

        if (filename.length === 1) {
            largeImg = baseImgPath + filename[0];
        }

        return largeImg;
    }

    function processThumbnails(t, isThumb) {
        var src, o, arr = [];

        dojo.forEach(t,function (a, i) {
            o = {};

            // If is thumbnails are available [ie. single image]
            src = (isThumb === false) ? a.src.replace("standard", "thumbnail") : a.src;

            o.arrayIndex = i;
            o.thumbPath = src;
            o.largePath = largeImgPaths(o.thumbPath);
            o.acviveClass = (dojo.hasClass(a,"on") || t.length === 1) ? "active" : "";
            o.w = (isThumb === false) ? mainImgDims.thumb.w : a.width*.6667;
            o.h = (isThumb === false) ? mainImgDims.thumb.h : a.height*.6667;
            o.orientation = imgRatio(o.w, o.h);
            o.thumbOffset = (o.orientation !== "portrait") ? ((40 - o.h)) / 2 + "px" : "0px"; // Added in *.6 as I've reduced the thumbnail box to 40px
            o.topOffset = "";

            arr.push(o);
        });

        return arr;
    }

    function clickToZoomLabel(img) {
        /*
         * A quick UI addition to highlight the zoom feature is available
         * Pass in your main image on product page
         * */
        var zoomLabel = dojo.create("p", {innerHTML: "<span>" + i18nLang.click_to_zoom + "</span>"} ); //Click to zoom
        dojo.attr(zoomLabel, "class", "iz-clicktozoom");
        dojo.addClass(prodImgDOM.query("#mainImageArea")[0], "iz-activated");
        dojo.place(zoomLabel, img, "after");
    }

    /*
     * Default main image contains a click event which loads a popup
     * this is cleared by cloning and replacing the main image without
     * inheriting the previous event. It is relatively seamless to the user.
     * */
    function removeDefaultEvent(newEl, oldEl) {
        updateStyle(oldEl,"display:none");
        dojo.attr(newEl, "id", "productMainImageNew");
        dojo.place(newEl, oldEl, 'after');
    }

    // A quick report of the status of key elements during zoom activity for debug
    this.getParams = function () {
        var debug = {};

        debug.mainImgDims = mainImgDims;
        debug.viewGeometry = viewGeometry;
        debug.zoomGeometry = zoomGeometry;
        debug.listeners = listeners;
        debug.thresholds = thresholds;
        debug.activeArea = activeArea;
        debug.thumbData = libImages;

        return debug;
    };

    this.init = function (ProdClass, lang) {

        var win;
        win = dojo.window.getBox();
        if (typeof win.w !== "undefined" && typeof win.h !== "undefined") {
            if (win.w <  500) {
                return false;
            }
        }

        // If there is no main image, ObjectURL or XHR kill the function
        if (mainImg === "undefined" || !ProdClass || !lang || /NoImageIcon.jpg/.test(mainImg.src)) {
            return false;
        }

        i18nLang = lang || {};
        i18nLang.close = lang.close || "Close";
        i18nLang.click_to_zoom = lang.click_to_zoom || "Click to zoom";

        PDPTrack = ProdClass.addPDPTracking || function(){};
        PDPsku = ProdClass.sku || "none";

        mainImgDims = function() {
            var obj = {};
            obj.thumb = {};

            obj.h = mainImg.height;
            obj.w = mainImg.width;
            obj.thumb.h = obj.h*(40/220);
            obj.thumb.w = obj.w*(40/220);
            obj.orientation = imgRatio(obj.w, obj.h);

            return obj;
        }();

        // Pull in primary and or secondary images
        libImages = (thumbnails.length > 0) ? processThumbnails(thumbnails, true) : processThumbnails([mainImg], false);

        // Remove default functionality from main image
        removeDefaultEvent(mainImgClone, mainImg);

        //Add label to UI
        clickToZoomLabel(mainImgClone);

        // setImageZoom this event is live for the whole visit
        // No need to add to event array
        addZoom(mainImg.parentElement, libImages);

    };

}
